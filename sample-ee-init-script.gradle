////
//// Use this script file as a sample on how to pass properties to Gradle build which
//// are user-specific (and possibly sensitive) and should not be put into source control.
////

// Alternatively, you can also pass the properties to Gradle using '-P',
// e.g. 'gradle -PpackerExecutable=/opt/packer_0.8.2_darwin_amd64/packer ...' but beware that
// this is strongly discouraged for sensitive properties, like AWS / Jenkins credentials.

// You can use init script files for your build with switch '--init-script',
// e.g. 'gradle --init-script init.gradle ...'
// See more details in Gradle docs:
//      * https://docs.gradle.org/current/userguide/init_scripts.html

// The project properties are set in the init script through SystemProperties, Gradle will parse
// these and set project properties accordingly. For details, see
//      * https://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_properties_and_system_properties


// Following two properties can be used to set credentials for 'downloadBundle' task
// fetching the Liferay bundle from 'liferay.workspace.bundle.url'

// sets project property 'downloadBundleUserName'
System.setProperty('org.gradle.project.downloadBundleUserName', 'john.doe')

// sets project property 'downloadBundlePassword'
System.setProperty('org.gradle.project.downloadBundlePassword', 'your-secret-password')


// You can set absolute paths for Packer / Docker commands used by Gradle if these tools
// are not available in your PATH or if you want to use specific version of this tools
// in known location.

// sets project property 'packerExecutable'
System.setProperty('org.gradle.project.packerExecutable', '/path/to/your/packer')
// '/Applications/packer_0.8.6_darwin_amd64/packer'
// '/opt/packer_0.8.2_darwin_amd64/packer'

// sets project property 'dockerExecutable'
System.setProperty('org.gradle.project.dockerExecutable', '/path/to/your/docker')


// sets project property 'awsAccessKey'
// sample AWS access key: AKIAITSPLG525ZTLDBPQ
System.setProperty('org.gradle.project.awsAccessKey', 'your access key goes here')

// sets project property 'awsSecretKey'
// sample AWS secret key: oNJQFy0zbs+ZIhiTbnVKl5ZXY2ovlHioqIGn3rrm
System.setProperty('org.gradle.project.awsSecretKey', 'your secret key goes here')

// When you want to use tasks from subproject 'jenkins' which work with remote (and secured)
// Jenkins server, you will need to provide the Jenkins credentials to the build.
// These are used to create the jobs inside the configured Jenkins server.
// See gradle-ee-default.properties -> 'liferay.workspace.ee.jenkins.server.url' for details.

// sets project property 'jenkinsUserName'
System.setProperty('org.gradle.project.jenkinsUserName', 'jenkins username to be used by the build')

// sets project property 'jenkinsPassword'
System.setProperty('org.gradle.project.jenkinsPassword', 'jenkins password or API token to be used by the build')

