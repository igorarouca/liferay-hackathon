def awsAmiBaseAmiLinuxPackagesFormat = gradle.liferayWorkspaceEe.awsAmiBaseAmiLinuxPackagesFormat

assert awsAmiBaseAmiLinuxPackagesFormat == 'deb' || awsAmiBaseAmiLinuxPackagesFormat == 'rpm',
        "Unknown Linux packages format, either 'deb' or 'rpm' has to be set " +
                "in 'liferay.workspace.ee.aws.ami.base.ami.linux.packages.format'"

def distBundleOspackageTaskPath = ":liferay-workspace-ee:ospackage:distBundle${awsAmiBaseAmiLinuxPackagesFormat.capitalize()}"

def distBundleOspackageTask = tasks.getByPath(distBundleOspackageTaskPath)
assert distBundleOspackageTask != null,
        "Cannot find required task which produces the DEB / RPM file (checked path '${distBundleOspackageTaskPath}', " +
                "based on configured base ami linux packaging format '${awsAmiBaseAmiLinuxPackagesFormat}')"

ext {
    // RPM / DEB task will output one .rpm / .deb file, but possibly others as
    // well (like 'sample-liferay-dxp-workspace.dev_1.0.0-11_amd64.changes')
    distBundleOspackageTaskOutputPackageFile =
            distBundleOspackageTask.outputs.files.findAll { it.name.endsWith('.deb') || it.name.endsWith('.rpm')}[0]

    currentEnvironment = gradle.liferayWorkspace.getEnvironment()

    projectVersion = gradle.liferayWorkspaceEe.projectVersion

    releaseNumber = gradle.liferayWorkspaceEe.releaseNumber

    packerExecutable = gradle.liferayWorkspaceEe.externalExecutables.packer.executable
}


task distBundleAmi {
    group "Liferay Workspace EE - AWS"
    description "Creates new AMI in AWS, with Liferay bundle installed using ${awsAmiBaseAmiLinuxPackagesFormat.toUpperCase()}."

    dependsOn 'runPackerBuild', distBundleOspackageTask

    doLast {
        def amiName = runPackerBuild.packerUserVariables['ami_name']

        def packerOutputFile = runPackerBuild.outputFile

        def amis = _parseMachineOutputforCreatedAmiIds(packerOutputFile)

        println "New AMI with '${rootProject.relativePath(distBundleOspackageTaskOutputPackageFile)}' " +
                "package installed was baked in AWS. Following AMIs were created:"

        amis.each { key, value ->
            println "  * ${key}: ${value}"
        }

        // create artifacts = text files in build/

        _createArtifactsFromAmisIds(amis, amiName)
    }
}

task listAwsProperties() {
    group "Liferay Workspace EE - AWS"
    description "Lists all variables as used by AWS-related tasks"

    doLast {
        println "AWS variables being utilized:"

        gradle.liferayWorkspaceEe.findAll { it.key.startsWith('aws') }.each { key, value ->
            if (key == 'awsSecretKey' && value) {
                // do not show secret in output
                value = '***'
            }

            println "  ${key} = ${value}"
        }
    }
}

///////////////////
// Internal Tasks
///////////////////

task runPackerBuild (type: AwsPackerExec) {
    dependsOn distBundleOspackageTask, 'runPackerValidate'

    ext.packerUserVariables = [
            // use the name of the DEB / RPM file will be the name of the AMI + platform + timestamp
            ami_name                       :
                    "${distBundleOspackageTaskOutputPackageFile.name}/" +
                    "${gradle.liferayWorkspaceEe.awsAmiPlatformKey}/" +
                    "${System.currentTimeMillis()}",

            ami_description                :
                    "Built for project '${rootProject.name}', '${currentEnvironment}' environment, " +
                    "version '${projectVersion}', release number '${releaseNumber}', on ${new Date()}",

            ami_primary_region             : gradle.liferayWorkspaceEe.awsAmiPrimaryRegion,
            ami_copy_to_regions            : gradle.liferayWorkspaceEe.awsAmiCopyToRegions,

            base_ami_id                    : gradle.liferayWorkspaceEe.awsAmiBaseAmiId,
            base_ami_linux_packages_format : gradle.liferayWorkspaceEe.awsAmiBaseAmiLinuxPackagesFormat,
            base_ami_ssh_user_name         : gradle.liferayWorkspaceEe.awsAmiBaseAmiSshUserName,

            instance_type                  : gradle.liferayWorkspaceEe.awsAmiBuildEc2InstanceType,
            vpc_id                         : gradle.liferayWorkspaceEe.awsAmiBuildEc2InstanceVpcId,
            subnet_id                      : gradle.liferayWorkspaceEe.awsAmiBuildEc2SubnetId,

            liferay_bundle_ospackage_source: distBundleOspackageTaskOutputPackageFile,
            liferay_bundle_ospackage_name  : distBundleOspackageTaskOutputPackageFile.name,

            // TODO any change to compute the value in the execution phase (not in config phase as here),
            // based on the actual size of the .deb file?
            liferay_bundle_ospackage_size  : '400-1100 MB',

            project_name                   : rootProject.name,
            project_version                : projectVersion,
            project_environment_name       : currentEnvironment,
            project_release_number         : releaseNumber
    ]

    ext.outputFile = new File(project.buildDir, "packer.out.txt")

    doFirst {
        outputFile.parentFile.mkdirs()

        // store the standard output simultaneously into a file as well
        // based on: http://stackoverflow.com/a/27053294/4966203
        standardOutput = new org.apache.tools.ant.util.TeeOutputStream(
                new FileOutputStream(outputFile),
                System.out);
    }

    // AWS credentials are passed explicitly to the Packer template, see
    // https://www.packer.io/docs/builders/amazon.html

    def showExtraPackerLogging = false

    // must be machine-readable since we want to parse created AMI IDs from Packer output
    // see task 'distBundleAmi' -> doLast
    def machineReadableOutput = true

    packerCommand(
            packerExecutable,
            file('packer-template.json'),
            'build',
            packerUserVariables,
            [
                    AWS_ACCESS_KEY_ID: gradle.liferayWorkspaceEe.awsAccessKey,
                    AWS_SECRET_ACCESS_KEY: gradle.liferayWorkspaceEe.awsSecretKey
            ],
            showExtraPackerLogging,
            machineReadableOutput)
}

task runPackerValidate (type: AwsPackerExec) {
    dependsOn distBundleOspackageTask

    packerCommand(
            packerExecutable,
            file('packer-template.json'),
            'validate',
            runPackerBuild.packerUserVariables)

    doFirst {
        println "Used Packer user variables:"

        runPackerBuild.packerUserVariables.each { key, value ->
            println "  ${key} = ${value}"
        }
    }
}

/**
 * Takes machine output from Packer and tries to parse the AMI IDs from it, which were created.
 * @param packerOutput
 * @return amiIdsByRegion
 */
private Map<String, String> _parseMachineOutputforCreatedAmiIds(File packerOutputFile) {

    assert packerOutputFile, "Packer output file has to be provided"

    // standard output:
    //
    //    ...
    //    --> amazon-ebs: AMIs were created:
    //
    //    us-east-1: ami-19601070
    //    us-west-2: ami-dfrwe345

    // machine readable output (based on https://github.com/mitchellh/packer/issues/881):
//    ...
//    1393030721,amazon-ebs,artifact-count,1
//    1393030721,amazon-ebs,artifact,0,builder-id,mitchellh.amazonebs
//    1393030721,amazon-ebs,artifact,0,id,us-east-1:ami-e31e1f8a%!(PACKER_COMMA)us-west-1:ami-c4fac681

    def packerOutput = packerOutputFile.text

    String line = packerOutput.find(/artifact,0,id,.*/)

    logger.debug "_parseMachineOutputforCreatedAmiIds: line: ${line}"

    if (line) {
        def mapping = line.replace('artifact,0,id,', '')

        logger.debug "_parseMachineOutputforCreatedAmiIds: mapping: ${mapping}"

        def amis = mapping.tokenize('%!(PACKER_COMMA)')

        logger.debug "_parseMachineOutputforCreatedAmiIds: amis: ${amis}"

        return amis.collectEntries {
            def keyValue = it.split(':');
            [keyValue[0], keyValue[1]]
        }
    }
    else { // 'artifact,0,id,.*' not matched in the output

        logger.quiet "Could not parse the Packer output for created AMIs, is the output machine-readable? " +
                "Output written into '${packerOutputFile.absolutePath}' for debug purposes"

        return [:]
    }
}

/**
 * Takes mapping of AMIs and for each creates one text file in [rootProject]/build
 * with AMI ID written  inside. Useful when e.g. related Jenkins job want to use
 * product of 'distBundleAmi'.
 *
 * @param amiIdsByRegion
 * @param amiName
 */
private void _createArtifactsFromAmisIds(Map<String, String> amiIdsByRegion, String amiName) {
    assert amiIdsByRegion != null   // can be empty
    assert amiName

    def targetDir = rootProject.buildDir
    targetDir.mkdirs()

    // replace all characted (allowed in the AMI name) which are not allowed in file names
    // typical AMI name: "sample-liferay-dxp-workspace.dev_1.0.0-4_amd64.deb/ubuntu/1473166230187"
    def fileBaseName = amiName.replaceAll(/[^a-z0-9\._-]/, '-')

    amiIdsByRegion.each { awsRegion, amiId ->
        def artifactsForAmiInOneRegion = new File(targetDir, "${fileBaseName}.${awsRegion}.ami-id.txt")

        artifactsForAmiInOneRegion << amiId

        logger.info "Written artifact file with AMI ID inside: '$artifactsForAmiInOneRegion.absolutePath'"
    }
}

/**
 * Executes Packer (https://www.packer) 'build' command with given JSON config and
 * given set of user variables. The result is the same as if you run e.g.:
 *
 *      $ packer build \
 *          -var 'aws_access_key=YOUR ACCESS KEY' \
 *          -var 'aws_secret_key=YOUR SECRET KEY' \
 *          packer-template.json
 */
class AwsPackerExec extends Exec {

    void packerCommand(
            String packerExecutable, packerTemplate, String packerCommand,
            Map packerUserVariables, Map packerEnvironmentVariables = [:],
            boolean showExtraPackerLogging = false,
            boolean machineReadableOutput = true) {

        // use environment variables, so that the values are not visible in process'
        // command line; environment variables are explicitly used in the Packer template
        environment(packerEnvironmentVariables)

        if (showExtraPackerLogging) {
            environment([PACKER_LOG: 1])
        }

        def packerArguments = [packerCommand]

        if (machineReadableOutput) {
            packerArguments.add '-machine-readable'
        }

        packerUserVariables.each { key, value ->
            packerArguments.add '-var'
            packerArguments.add "${key}=${value}"
        }

        packerArguments.add packerTemplate

        executable packerExecutable
        args packerArguments
    }

}