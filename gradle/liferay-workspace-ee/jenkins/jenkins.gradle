import org._10ne.gradle.rest.RestTask
import java.util.regex.Pattern

buildscript {
    repositories {
        maven {
            // https://plugins.gradle.org/plugin/com.terrafolio.jenkins
            url "http://repo.jenkins-ci.org/releases/"
        }

        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
}

plugins {
    // Jenkins plugin, based on https://plugins.gradle.org/plugin/com.terrafolio.jenkins
    id "com.terrafolio.jenkins" version "1.3.2"

    // REST plugin, based on https://plugins.gradle.org/plugin/org.tenne.rest
    // WARNING: JDK 8 is required: http://blog.10ne.org/2015/09/21/rest-gradle-plugin-update/comment-page-1/
    id "org.tenne.rest" version "0.4.2"

    // https://plugins.gradle.org/plugin/net.saliman.properties
    id "net.saliman.properties" version "1.4.6"
}


// use the name of the root project (= the workspace) to name all defined jobs & views
def projectName = rootProject.name

final Pattern SUPPORTED_JENKINS_VERSIONS = ~/^1\.6.+|2\..+$/

File configsDir = rootProject.file('configs')

// Determine for which environments (directories in '/configs') we will define & create the Jenkins jobs
def excludedConfigsDirectories = (['common'] + gradle.liferayWorkspaceEe.jenkinsInitialJobsExcludeEnvironments).flatten()
def environments = configsDir.listFiles().findAll { it.isDirectory() && !(it.name in excludedConfigsDirectories) }.collect { it.name }

File jenkinsItemsDir = rootProject.file(gradle.liferayWorkspaceEe.jenkinsItemsDir)

File jenkinsJobsDir = file("${jenkinsItemsDir}/jobs")
File jenkinsViewsDir = file("${jenkinsItemsDir}/views")

// Add Jenkins configuration based on https://github.com/ghale/gradle-jenkins-plugin/wiki

// TODO switch all REST call sto using 'jenkinsci' library? Does the waiting + restart by itself
//  https://github.com/jenkinsci/install-necessary-plugins/blob/master/src/main/java/org/jenkinsci/installNecessaryPlugins/Installer.java

// TODO figure out CSRF:
//  * https://github.com/ghale/gradle-jenkins-plugin/issues/78
//  * https://wiki.jenkins-ci.org/display/JENKINS/Remote+access+API#RemoteaccessAPI-CSRFProtection
jenkins {
    servers {
        jenkinsServer {
            // the plugin will make sure the URL ends with '/'
            // see: https://github.com/ghale/gradle-jenkins-plugin/blob/master/src/main/groovy/com/terrafolio/gradle/plugins/jenkins/dsl/JenkinsServerDefinition.groovy#L19
            url gradle.liferayWorkspaceEe.jenkinsServerUrl
            secure gradle.liferayWorkspaceEe.jenkinsServerSecure

            // credentials should be passed using init script or with '-P...'
            username gradle.liferayWorkspaceEe.jenkinsUserName
            password gradle.liferayWorkspaceEe.jenkinsPassword
        }
    }

    defaultServer servers.jenkinsServer

    jobs {

        if (jenkinsJobsDir.exists()) {

            // directory '/jenkins/jobs' exists -> we will assume it contains backed up jobs
            // from remote Jenkins server as produced by 'dumpRemoteJenkinsItems' task

            def jobXmls = jenkinsJobsDir.listFiles().findAll { it.name.endsWith('.xml') }

            assert !jobXmls.isEmpty(),
                    "Directory '${jenkinsJobsDir}' exists, but it does not contain any XMLs with Jenkins jobs. " +
                    "Please delete the directory first."

            jobXmls.each { File jobXmlFile ->
                // make sure to strip the '.xml' extension when defining the job's name, otherwise
                // it won't match the job's name on the Jenkins server
                def jobName = "${jobXmlFile.name.replace('.xml', '')}"

                "${jobName}" {
                    definition {
                        xml jobXmlFile
                    }
                }
            }
        }

        else {
            // we have no jobs in '/jenkins/jobs' -> define a set of initial jobs, using DSL

            // define initial set of jobs, using DSL;
            environments.each { currentEnvironmentName ->
                "${projectName}_build-${currentEnvironmentName}" {
                    dsl {
                        // for available methods, see https://jenkinsci.github.io/job-dsl-plugin/#path/job

                        // cannot define 'customConfigFile', we only have 'job' context and that one is one level up
        //                customConfigFile('initGradleScript') {
        //                    // Sets a comment for the config file.
        //                    comment('comment')
        //                    // Sets the content for the config file.
        //                    content('content')
        //                }

                        // TODO we can use this only after:
                        // (1) installing https://wiki.jenkins-ci.org/display/JENKINS/Config+File+Provider+Plugin (doable with outher plugins)
                        // (2) creating the file using some REST API (haven't found a way yet)
        //                wrappers {
        //                    configFiles {
        //                        file('initGradleScript') {
        //                            variable('INIT_SCRIPT_FILE')
        //                        }
        //                    }
        //                }

                        // https://jenkinsci.github.io/job-dsl-plugin/#path/customConfigFile


                        disabled()

                        displayName "${projectName} - build-${currentEnvironmentName}"
                        description """\
                            Builds 'master' branch for ${projectName} from GitHub

                            TODO
                            (1) check SCM (GitHub)
                                * repository URL, setup your SCM credentials
                            (2) check build schedule
                                * ideally setup GitHub webhook and disable polling
                                * see https://wiki.jenkins-ci.org/display/JENKINS/GitHub+Plugin
                            (3) make sure Oracle JDK 8 is configured and used for this job
                                * see https://stackoverflow.com/questions/28810477/how-to-change-the-jdk-for-a-jenkins-job
                            (4) remove tasks from Gradle build producing archives you do not need
                                * you might only be interested in 'DEB' archives, so remove invoking of 'distBundleRpm' task
                            """.stripIndent()

                        // keep logs, history and reports for 30 days
                        // discard the large built files more often
                        // logRotator(int daysToKeep = -1, int numToKeep = -1, int artifactDaysToKeep = -1, int artifactNumToKeep = -1)
                        logRotator (30, -1, -1, 5)

                        scm {
                            github "liferay/${projectName}", 'master', 'https', { scmXmlNode ->

                                // enrich the <scm /> XML element with the equivalent of
                                //  git { clean(true) }

                                scmXmlNode / 'extensions' / 'hudson.plugins.git.extensions.impl.CleanBeforeCheckout' {}
                            }
                        }

                        triggers {
                            githubPush()
                            // Poll GitHub every 15 minutes for new changes
                            scm 'H/15 * * * *'
                        }

                        steps {
                            gradle {
                                tasks 'distBundleZip distBundleTar distBundleDeb distBundleRpm'
                                switches "-Pliferay.workspace.environment=${currentEnvironmentName}"
                                switches '-PreleaseNumber=$BUILD_NUMBER'
                                switches '--no-daemon' // recommended by Gradle for consistency
                                useWrapper(true)
                                makeExecutable(true)

                                // switches '--init-script $INIT_SCRIPT_FILE'
                                configure { node -> // 'hudson.plugins.gradle.Gradle'

                                    // nice trick with multi-line strings: http://stackoverflow.com/a/19882917/4966203
                                    (node / 'description').value = """\
                                        Use e.g. '--init-script=/opt/liferay/jenkins-build/init.gradle' if you need
                                        to pass some configuration to project's build. See
                                        [project-sources-root]/sample-ee-init-script.gradle' for example format.
                                        You can use multiple init scripts in Gradle, by repeating the '--init-script=...'
                                        switch. This allows you to combine the configuration based on multiple files.

                                        You need to make sure that the referenced file is available to the build.
                                        You have several options to do it:
                                            * https://wiki.jenkins-ci.org/display/JENKINS/Config+File+Provider+Plugin
                                                * plain-text files, managed in Jenkins
                                                * path can be referenced using variable expression in the build step
                                            * https://wiki.jenkins-ci.org/display/JENKINS/Credentials+Binding+Plugin
                                                * secret files, managed in Jenkins
                                                * path can be referenced using variable expression in the build step
                                            * create the file accordingly on your Jenkins server FS
                                                * any file, you manage the file in OS (SSH)
                                                * path is simply the location on FS
                                        """.stripIndent()

                                        // TODO strip new lines as well
                                }
                            }
                        } // steps {

                        publishers {
                            // TODO causes issue: https://github.com/ghale/gradle-jenkins-plugin/issues/69
        //                    archiveArtifacts {
        //                        fingerprint(true)
        //                        pattern 'build/*.zip'
        //                        pattern 'build/*.tar.gz'
        //                        pattern 'build/*.deb'
        //                        pattern 'build/*.rpm'
        //                    }
                        }

                        // because of https://github.com/ghale/gradle-jenkins-plugin/issues/69, use XML manipulation
                        configure { node ->
                            node / 'publishers' / 'hudson.tasks.ArtifactArchiver' {
                                artifacts('build/*')
                                latestOnly('false')
                                allowEmptyArchive('false')
                                onlyIfSuccessful('true')
                                fingerprint('true')
                            }
                        }
                    } // dsl {
                } // "${projectName}_build-${currentEnvironmentName}"

                "${projectName}_deploy-${currentEnvironmentName}" {
                    dsl {
                        // for available methods, see https://jenkinsci.github.io/job-dsl-plugin/#path/job

                        disabled()

                        displayName "${projectName} - deploy-${currentEnvironmentName}"

                        description """\
                            Deploys the latest successful DEB from '${projectName} - build-${currentEnvironmentName}'

                            TODO
                            (1) check build schedule
                                * manually / periodically
                            (2) set up your SSH server where you want the DEB to be installed
                                * see Jenkins docs
                            (3) change to copy & install RPM if your target Linux server is RedHat-based
                                * 'Artifacts to copy' = 'build/*.rpm'
                                * Trasfer set -> Source files -> *.rpm
                                * 'Exec command' = 'sudo rpm -iv --replacefiles *.rpm'
                            """.stripIndent()

                        // keep logs, history and reports for 30 days
                        // discard the large built files more often
                        // logRotator(int daysToKeep = -1, int numToKeep = -1, int artifactDaysToKeep = -1, int artifactNumToKeep = -1)
                        logRotator (30, -1, -1, 5)

                        triggers {
                            // run the job once every night, around 2am PDT (UTC-7:00)
        //                    cron 'H 9 * * *'
                        }

                        steps {
                            shell(
                                '''\
                                    # Clean up any previously copied artifacts
                                    set -ex
                                    
                                    rm -rf $WORKSPACE/*
                                '''.stripIndent())

                            copyArtifacts("${projectName}_build-${currentEnvironmentName}") {
                                buildSelector {
                                    latestSuccessful(true)
                                }
                                includePatterns('build/*.deb')
                                flatten(true)
                                optional(false)
                            }
                        } // steps {

                        // It's not safe to rely on convention when we want to use the build number
                        // of the job from where we copied the artifacts, so use the suffix instead
                        // (needs to be configured using XML manipulation, no support in DSL)
                        //  see: https://wiki.jenkins-ci.org/display/JENKINS/Copy+Artifact+Plugin#CopyArtifactPlugin-Version1.36%28Sep6%2C2015%29

                        // sample XML:
                        //    <builders>
                        //        <hudson.plugins.copyartifact.CopyArtifact plugin='copyartifact@1.38.1'>
                        //            <project>liferay-workspace_build-dev</project>
                        //            <filter>build/*.deb</filter>
                        //            <target></target>
                        //            <excludes></excludes>
                        //            <selector class='hudson.plugins.copyartifact.StatusBuildSelector'>
                        //                <stable>true</stable>
                        //            </selector>
                        //            <flatten>true</flatten>
                        //            <doNotFingerprintArtifacts>false</doNotFingerprintArtifacts>
                        //            <resultVariableSuffix>BUILD_JOB</resultVariableSuffix>

                        def buildJobBuildNumberSuffix = 'BUILD_JOB'
//                        def buildJobBuildNumberSuffix = "BUILD_${currentEnvironmentName.toUpperCase()}"

                        configure { node ->
                            node / 'builders' / 'hudson.plugins.copyartifact.CopyArtifact' {
                                resultVariableSuffix(buildJobBuildNumberSuffix)
                            }
                        }

                        publishers {

                            def buildJobBuildNumberShellVariableName =
                                    "COPYARTIFACT_BUILD_NUMBER_${buildJobBuildNumberSuffix}"

                            def remoteDirectoryName =
                                    "jenkins_build_\${$buildJobBuildNumberShellVariableName}_deploy_\${BUILD_NUMBER}"

                            publishOverSsh {
                                // the server is only referenced here, it has to be created in global Jenkins configuration
                                server('server-01') {

                                    credentials('jenkins') {
                                        pathToKey('/opt/jenkins/private_ssh_key')
                                    }
                                    transferSet {
                                        remoteDirectory(remoteDirectoryName)
                                        sourceFiles('*.deb')
                                        execCommand("""\
                                            set -ex

                                            # '/tmp' must be matching your SSH server's config - 'Remote Directory'
                                            SSH_SERVER_CONFIGURED_ROOT_DIR='/tmp'
                                            
                                            cd \${SSH_SERVER_CONFIGURED_ROOT_DIR}/$remoteDirectoryName

                                            
                                            # Make sure to check 'Advanced' -> 'Exec in pty' to be able to use 'sudo'
                                            sudo dpkg -i *.deb                                                            

                                            # Alternate if copying RPM artifacts and installing it into OS
                                            # sudo rpm -ivh --replacefiles --replacepkgs *.rpm

                                            
                                            # Start the new bundle
                                            sudo /etc/init.d/liferay-tomcat start
                                                                            

                                            # Cleanup any uploaded artifacts
                                            sudo rm -rf \${SSH_SERVER_CONFIGURED_ROOT_DIR}/$remoteDirectoryName   
                                            
                                            """.stripIndent())
                                        execInPty(true)         // since we want to run 'sudo'
                                        execTimeout(900000)     // 15 minutes, in ms
                                    } // transferSet {
                                } // server('server-01') {
                            } // publishOverSsh {
                        } // publishers {
                    } // dsl {
                } // "${projectName}_deploy-${currentEnvironmentName}"
            } // environments.each
        } // if (!jenkinsJobsDir.exists())
    } // jobs

    views {
        if (jenkinsViewsDir.exists()) {

            // directory '/jenkins/views' exists -> we will assume it contains backed up views
            // from remote Jenkins server as produced by 'dumpRemoteJenkinsItems' task

            def viewXmls = jenkinsViewsDir.listFiles().findAll { it.name.endsWith('.xml') }

            assert !viewXmls.isEmpty(),
                    "Directory '${jenkinsViewsDir}' exists, but it does not contain any XMLs with Jenkins views. " +
                            "Please delete the directory first."

            viewXmls.each { File viewXmlFile ->
                // make sure to strip the '.xml' extension when defining the view's name, otherwise
                // it won't match the view's name on the Jenkins server
                def viewName = "${viewXmlFile.name.replace('.xml', '')}"

                "${viewName}" {
                    xml viewXmlFile
                }
            }
        } // if (jenkinsViewsDir.exists())

        else {
            // we have no views in '/jenkins/views' -> define a set of initial views, using DSL

            "${projectName}" {
                dsl {
                    jobs {
                        names(
                            // all build & deploy jobs from the DSL definition
                            jenkins.jobs.collect { it.name } as String[]

                            // TODO should we add the 'extra' job(s) to this view as well, if any?
                        )
                    }
                    columns {
                        status()
                        weather()
                        name()
                        lastSuccess()
                        lastFailure()
                        lastDuration()
                        buildButton()
                    }
                }
            }
        } // if (!jenkinsViewsDir.exists())
    } // views
}

task initJenkinsServer(type: com.terrafolio.gradle.plugins.jenkins.tasks.UpdateJenkinsItemsTask) { task ->

    group "Liferay Workspace EE - Jenkins"
    description "Installs recommended plugins and creates recommended jobs & views in Jenkins " +
            "server '${jenkins.servers.jenkinsServer.url}' for this workspace. " +
            "Jobs will be created for environments ${environments}."

    dependsOn updateJenkinsItems, 'installJenkinsPlugins'
}

// Hide all deprecated tasks added by jenkins plugin from listing in 'gradlew tasks'
[ deleteJenkinsJobs, dumpJenkinsJobs, retireJenkinsJobs, updateJenkinsJobs, validateJenkinsJobs ].each { task ->
    task.group "Jenkins Management (Deprecated)"

    task.dependsOn 'checkJenkinsVersionSupported'
}

[ deleteJenkinsItems, dumpJenkinsItems, dumpRemoteJenkinsItems, retireJenkinsItems,
    updateJenkinsItems, validateJenkinsItems ].each { task ->

    task.dependsOn 'checkJenkinsVersionSupported'
    task.finalizedBy 'jenkinsRestCallFailureNote'

    // Make sure all remaining default jenkins plugin tasks are listed under LWE group
    task.group "Liferay Workspace EE - Jenkins"

    // add nicer description - with the Jenkins server URL inside
    task.description = task.description.replace("the server(s)", "server '${jenkins.servers.jenkinsServer.url}'")
}

dumpRemoteJenkinsItems {
    group "Liferay Workspace EE - Jenkins"

    description "Dumps remote item configurations from server '${jenkins.servers.jenkinsServer.url}' " +
            "and stores them as XMLs in '[workspace]/${rootProject.relativePath(jenkinsItemsDir)}'."

    // This is described by the docs as recommended for safer import of the XMLs
    // back into Jenkins server
    prettyPrint = false

    doFirst {

        // Jenkins plugins does not "list" remote jobs, but rather checks locally defined ones
        // and based on them fetches remote jobs' definition one by one. So jobs which do not
        // exist locally cannot be dumped from remote server as XML

        gradle.liferayWorkspaceEe.jenkinsInitialJobsExtraDumpedJobNames.each { extraJobName ->
            if (!jenkins.jobs.hasProperty("$extraJobName")) {
                // define "empty" job of given name locally, so that the task can
                // fetch its XML (if the job exists in Jenkins server)
                jenkins.jobs {
                    "$extraJobName" {
                        dsl {}
                    }
                }
            }
        }
    }

    doLast {
        // delete any XMLs of old jobs or views
        delete jenkinsItemsDir

        copy {
            from "${buildDir}/remotes"      // this is where the XMLs will be dumped by the default task's action
            into jenkinsItemsDir

            // prevents empty directories like 'jenkinsServer/jobs' to remain
            // in the target directory, due to top-level dir stripping below
            includeEmptyDirs = false

            // strip the top-level 'jenkinsServer' directory, since we will have only one server defined
            eachFile { fileCopyDetails ->
                fileCopyDetails.path = fileCopyDetails.path.replaceAll('jenkinsServer', '')
            }
        }

        println "Following items from '${jenkins.servers.jenkinsServer.url}' were " +
                "stored as XMLs in '[workspace]/${rootProject.relativePath(jenkinsItemsDir)}':"

        jenkinsJobsDir.list().each { jobXml ->
            println " * job '${jobXml.replace('.xml', '')}'"
        }

        jenkinsViewsDir.list().each { viewXml ->
            println " * view '${viewXml.replace('.xml', '')}'"
        }
    }
}

task listDefinedJenkinsItems {
    group "Liferay Workspace EE - Jenkins"
    description "Lists all jobs and views which the tasks will operate on. No other items" +
            "will be e.g. dumped, even if they existed in Jenkins server '${jenkins.servers.jenkinsServer.url}'."

    doLast {
        println "Jenkins items defined for this workspace project " +
                "(${jenkinsItemsDir.exists() ? "based on XMLs in '${jenkinsItemsDir}'" : 'based on DSLs of initial jobs and views'}):"

        jenkins.jobs.each { job ->
            println "  * job '${job.name}'"
        }
        jenkins.views.each { view ->
            println "  * view '${view.name}'"
        }

        if (gradle.liferayWorkspaceEe.jenkinsInitialJobsExtraDumpedJobNames) {
            println "\nFollowing extra jobs will be dumped from remote Jenkins as well, " +
                    "if they exist (when using task 'dumpRemoteJenkinsItems'):"

            gradle.liferayWorkspaceEe.jenkinsInitialJobsExtraDumpedJobNames.each { extraJobName ->
                println "  * ${extraJobName}"
            }
        }
    }
}

task deleteLocalJenkinsItems(type: Delete) {
    group "Liferay Workspace EE - Jenkins"
    description "Removes local XMLs of all Jenkins jobs and views, stored " +
            "in '[workspace]/${rootProject.relativePath(jenkinsItemsDir)}'"

    delete jenkinsItemsDir
}

task listJenkinsProperties() {
    group "Liferay Workspace EE - Jenkins"
    description "Lists all variables as used by Jenkins-related tasks."

    doLast {
        println "Jenkins variables being utilized:"

        gradle.liferayWorkspaceEe.findAll { it.key.startsWith('jenkins') }.each { key, value ->
            if (key == 'jenkinsPassword' && value) {
                // do not show password in output
                value = '***'
            }

            println "  ${key} = ${value}"
        }
    }
}

// Executed POST request is based on: http://stackoverflow.com/a/20848745/4966203:
//      curl -X POST -d '<jenkins><install plugin="git@2.0" /></jenkins>' \
//          --header 'Content-Type: text/xml' http://localhost:8080/pluginManager/installNecessaryPlugins

// TODO figure out CSRF:
//  * https://wiki.jenkins-ci.org/display/JENKINS/Remote+access+API#RemoteaccessAPI-CSRFProtection
task installJenkinsPlugins(type: RestTask) {
    description "Installs recommended Jenkins plugins into target Jenkins server " +
            "'${jenkins.servers.jenkinsServer.url}'."

    dependsOn 'checkJenkinsVersionSupported'

    // we want this to the the last REST call to Jenkins
    // deprecated tasks
    mustRunAfter deleteJenkinsJobs, dumpJenkinsJobs, retireJenkinsJobs, updateJenkinsJobs, validateJenkinsJobs
    // non-deprecated jenkins tasks
    mustRunAfter deleteJenkinsItems, dumpJenkinsItems, dumpRemoteJenkinsItems, retireJenkinsItems,
                        updateJenkinsItems, validateJenkinsItems

    // TODO would require active waiting for plugins' installation to complete
//    finalizedBy 'restartJenkinsSafely'

    def jenkinsPlugins = [
            // provide secret files to builds (as Gradle init scripts), with sensitive data,
            // like credentials to Nexus / files.liferay.com
            'credentials-binding@latest',

            // provide plain-text files to builds (as Gradle init scripts), with non-sensitive data,
            // like location of Packer binary on file system of Jenkins VM
            'config-file-provider@latest',

            // to allow to read and set Jenkins variables from a properties file;
            // we can write this file using Shell build step (e.g. reading AMI ID from .txt file)
            'envinject@latest',

            // to build / destroy Cloud Formation stacks in jobs, based on CF template file + inputs
            'jenkins-cloudformation-plugin@latest',

            'git@latest',               // to allow to fetch sources from GitHub (SCM)
            'github@latest',
            'gradle@latest',            // to run gradle wrapper as build step
            'copyartifact@latest',      // to build artifacts in one job, deploy in second
            'publish-over-ssh@latest'   // to push ZIP (DEB, RPM...) over SSH to remote server (using SCP)
    ]

    httpMethod = 'post'
    uri = jenkins.servers.jenkinsServer.url + 'pluginManager/installNecessaryPlugins'

    if (jenkins.servers.jenkinsServer.secure) {
        username = jenkins.servers.jenkinsServer.username
        password = jenkins.servers.jenkinsServer.password

        requestHeaders = [
                // simulate preeemptive auth, since 403 is returned by Jenkins for this URL
                // when no auth header is set (not 401 to trigger second request with auth header added automatically)
                // based on: http://stackoverflow.com/a/6641988/4966203
                'Authorization': 'Basic ' + "${username}:${password}".bytes.encodeBase64().toString()
        ]
    }

    requestBody = """\
        <jenkins>
            ${jenkinsPlugins.collect { "<install plugin='${it}' />"}.join('\n') }
        </jenkins>""".stripIndent()

    requestContentType = groovyx.net.http.ContentType.XML
    contentType = groovyx.net.http.ContentType.HTML

    responseHandler = {
        logger.info "[LWE] Response from Jenkins server, after requesting to install plugins ('null' is expected): ${it}"
    }

    doFirst {
        logger.debug "[LWE] Sending POST to ${uri}, with body: ${requestBody}"
    }

    doLast {
        println "Following Jenkins plugins were installed into '${jenkins.servers.jenkinsServer.url}':"

        jenkinsPlugins.each {
            println "  * ${it}"
        }

        logger.warn """\
                |
                | ==> NOTE: Make sure to restart Jenkins server running on '${jenkins.servers.jenkinsServer.url}' after 
                |       all plugins have been installed. Only this makes sure they are properly loaded! 
                |       You can use e.g. '${jenkins.servers.jenkinsServer.url}safeRestart' in your browser.
                |""".stripMargin()
    }
}

// POST to /restart restarts right away, POST to /safeRestart waits for jobs to finish
//  https://stackoverflow.com/questions/8072700/how-to-restart-jenkins-manually

// TODO this always requires admin privileges, even if there is no security enabled or
// all users can do anything in Jenkins

//task restartJenkinsSafely(type: RestTask) {
//    description "Sends request to restart remote Jenkins server '${jenkins.servers.jenkinsServer.url}', " +
//            "after all currently running jobs have finished. There is no waiting for the restart to complete."
//
//    requiredProperty 'jenkinsUserName'
//    requiredProperty 'jenkinsPassword'
//
//    httpMethod = 'post'
//    uri = jenkins.servers.jenkinsServer.url + 'safeRestart'
//
//    if (jenkins.servers.jenkinsServer.secure) {
//        username = jenkins.servers.jenkinsServer.username
//        password = jenkins.servers.jenkinsServer.password
//
//        requestHeaders = [
//                // simulate preeemptive auth, since 403 is returned by Jenkins for this URL
//                // when no auth header is set (not 401 to trigger second request with auth header added automatically)
//                // based on: http://stackoverflow.com/a/6641988/4966203
//                'Authorization': 'Basic ' + "${username}:${password}".bytes.encodeBase64().toString()
//        ]
//    }
//
//
//    doLast {
//        println "Request to restart Jenkins server '${jenkins.servers.jenkinsServer.url}' was sent, it will be done when it's safe (after all currently running jobs finish). This is necessary for newly installed plugins to be loaded by Jenkins and available in the created jobs."
//    }
//}

// based on: https://wiki.jenkins-ci.org/display/JENKINS/Remote+access+API#RemoteaccessAPI-DetectingJenkinsversion
task checkJenkinsVersionSupported(type: RestTask) {
    description "Checks that the version of remote Jenkins server '${jenkins.servers.jenkinsServer.url}' " +
            "is supported by workspace scripts."

    httpMethod = 'get'
    uri = jenkins.servers.jenkinsServer.url + 'api'

    if (jenkins.servers.jenkinsServer.secure) {
        username = jenkins.servers.jenkinsServer.username
        password = jenkins.servers.jenkinsServer.password

        requestHeaders = [
                // simulate preeemptive auth, since 403 is returned by Jenkins for this URL
                // when no auth header is set (not 401 to trigger second request with auth header added automatically)
                // based on: http://stackoverflow.com/a/6641988/4966203
                'Authorization': 'Basic ' + "${username}:${password}".bytes.encodeBase64().toString()
        ]
    }

    responseHandler = {
        // version is stored by Jenkins in response header 'X-Jenkins'
        // header retrieval based on:
        //  * http://javadox.com/org.codehaus.groovy.modules.http-builder/http-builder/0.6/groovyx/net/http/HttpResponseDecorator.HeadersDecorator.html
        String jenkinsVersion = serverResponse.headers.'X-Jenkins'

        boolean jenkinsVersionSupported = jenkinsVersion?.matches(SUPPORTED_JENKINS_VERSIONS)

        println "Jenkins server on '${jenkins.servers.jenkinsServer.url}' has version '${jenkinsVersion}' - " +
                "this is ${jenkinsVersionSupported ? 'a supported' : 'an unsupported'} version for the use with " +
                "workspace EE scripts."

        if(!jenkinsVersionSupported) {
            throw new GradleException(
                    "Configured Jenkins server '${jenkins.servers.jenkinsServer.url}' reports " +
                            "version '${jenkinsVersion}', which does not match any of supported " +
                            "versions - ${SUPPORTED_JENKINS_VERSIONS} (regular expression). If you want " +
                            "to utilize tasks from the 'Liferay Workspace EE - Jenkins' group in the workspace, " +
                            "please use supported Jenkins server version.")
        }
    }
}

// TODO implement crumb retrieval to be used with manual REST calls
//// wget -q --output-document - \
////      'JENKINS_URL/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,":",//crumb)'
//task retrieveCrumb(type: RestTask) {
//
//    httpMethod = 'get'
//    uri = jenkins.servers.jenkinsServer.url + 'crumbIssuer/api/xml?xpath=concat(//crumbRequestField,":",//crumb)'
//
//    if (jenkins.servers.jenkinsServer.secure) {
//        username = jenkins.servers.jenkinsServer.username
//        password = jenkins.servers.jenkinsServer.password
//
//        requestHeaders = [
//                // simulate preeemptive auth, since 403 is returned by Jenkins for this URL
//                // when no auth header is set (not 401 to trigger second request with auth header added automatically)
//                // based on: http://stackoverflow.com/a/6641988/4966203
//                'Authorization': 'Basic ' + "${username}:${password}".bytes.encodeBase64().toString()
//        ]
//    }
//
//
//    contentType = groovyx.net.http.ContentType.TEXT
//
//    ext.crumbValue = 'crumb-not-retrieved-yet'
//
//    responseHandler = {
//        String crumb = serverResponse.body
//
//        // expose the crumb to other tasks
//        crumbValue = crumb
//    }
//}


def tasksPossiblyFailingDueToJenkinsRestCallError = [
        deleteJenkinsItems, dumpJenkinsItems, dumpRemoteJenkinsItems, retireJenkinsItems,
        updateJenkinsItems, validateJenkinsItems,
        checkJenkinsVersionSupported, installJenkinsPlugins]

tasksPossiblyFailingDueToJenkinsRestCallError.each { task ->
    task.finalizedBy 'jenkinsRestCallFailureNote'
}

task jenkinsRestCallFailureNote {
    description "Helper tasks to suggest possible actions when a Jenkins REST call fails"
    group "Liferay Workspace EE - Jenkins"

    doLast {
        // collect all tasks which send a REST call which will require a valid CSRF crumb

        tasksPossiblyFailingDueToJenkinsRestCallError.each { task ->
            if (task.state.failure) {

                // Make sure to give a hint to user if REST call failed, possibly due to CSRF.
                // This task is finalizing all the tasks, so it will run even on the failure
                // of the task

                println """\
                        |
                        | NOTE: It looks like some Jenkins REST call failed. Please check the following:
                        |           1. make sure your credentials are correct
                        |               * Gradle project properties 'jenkinsUserName' and 'jenkinsPassword'
                        |               * use either 'username + password' or 'username + API token' (preferred)
                        |               * see gradle-ee-default.properties -> 'liferay.workspace.ee.jenkins.server.secure' for details
                        |            
                        |           2. make sure CSRF protection is disabled in Jenkins
                        |               * errors like 'No valid crumb was included in the request (HTTP ERROR 403)'
                        |               * CSRF can be configured in:
                        |                   Manage Jenkins -> Configure Global Security -> Prevent Cross Site Request Forgery exploits
                        | 
                        |       Current version of scripts cannot get around CSRF protection, please disable 
                        |       it temporarily if you want to setup your Jenkins using workspace ee. You can 
                        |       enable CSRF again after initial Jenkins setup is done.
                        |""".stripMargin()
            }
        }
    }
}