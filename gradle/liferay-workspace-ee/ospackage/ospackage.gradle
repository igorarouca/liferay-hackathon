import com.netflix.gradle.plugins.deb.Deb
import com.netflix.gradle.plugins.rpm.Rpm
import de.undercouch.gradle.tasks.download.Download
import de.undercouch.gradle.tasks.download.Verify
import org.redline_rpm.header.Architecture
import org.redline_rpm.header.Os

import org.gradle.api.logging.Logger

plugins {
    // https://github.com/nebula-plugins/gradle-ospackage-plugin
    id 'nebula.ospackage-base' version '3.4.0'

    // https://github.com/michel-kraemer/gradle-download-task
    id "de.undercouch.download" version '3.1.2'
}

// Cache the JDK's download, follow the pattern of Liferay Workspace Plugin (it downloads
// bundles into ~/.liferay/bundles).
def jdksCacheDir = file("${System.getProperty('user.home')}/.liferay/oracle-jdks")

// most commonly used JDKs
def downloadableJdks = [
        7: [
                // This should be pretty stable link (url), since JDK 7 is no longer getting new releases

                version           : '7u79',
                url               : 'http://download.oracle.com/otn-pub/java/jdk/7u79-b15/jdk-7u79-linux-x64.tar.gz',
                archiveName       : 'jdk-7u79-linux-x64.tar.gz',
                archiveTopLevelDir: 'jdk1.7.0_79',

                // You should ALWAYS compute the checksum and verify the downloaded
                // file's integrity (see how the install-oracle-jdk-x-linux-x64.sh does it)
                // based on: https://www.oracle.com/webfolder/s/digest/7u79checksum.html
                md5Checksum       : '9222e097e624800fdd9bfb568169ccad'
        ],
        8: [
                // This will be UNSTABLE link (url), since JDK 8 is getting new releases and only
                // the very latest can be downloaded publicly from oracle.com; for older releases,
                // oracle.com credentials (username, password) are required
                version           : '8u111',
                url               : 'http://download.oracle.com/otn-pub/java/jdk/8u111-b14/jdk-8u111-linux-x64.tar.gz',
                archiveName       : 'jdk-8u111-linux-x64.tar.gz',
                archiveTopLevelDir: 'jdk1.8.0_111',

                // You should ALWAYS compute the checksum and verify the downloaded
                // file's integrity (see how the install-oracle-jdk-x-linux-x64.sh does it)
                // based on: https://www.oracle.com/webfolder/s/digest/8u111checksum.html
                md5Checksum       : '2d48badebe05c848cc3b4d6e0c53a457'
                //sha256Checksum    : '187eda2235f812ddb35c352b5f9aa6c5b184d611c2c9d0393afb8031d8198974'
        ]
]

// Liferay Workspace by default works with Liferay 7.0, which is JDK 8+ only

def selectedJdkVersionMajor = 8

// the suffix for DEB / RPM package name for the version where Oracle JDK in not bundled inside the archive

def noJdkBundledPackageSuffix = '.nojdk'

// Use the TAR task, since 'unzip' is not installed by default in all Linux distributions,
// but 'tar' is very common. This task is defined by 'com.liferay.gradle.plugins.workspace'
// plugin applied by the Liferay Workspace Gradle project.
def distBundleTarTaskPath = ':distBundleTar'

// Initialize project properties used by 'bundle-types.gradle'
ext {
    distBundleTarTask = rootProject.tasks.getByPath(distBundleTarTaskPath)
}

assert distBundleTarTask != null,
        "Cannot find mandatory task producing the TAR file (checked path '${distBundleTarTaskPath}'), " +
            "was Liferay Workspace plugin applied?"

// include the script first, since we need to use parsed bundle type retrieved from
// task 'checkBundleType' in ext properties below
apply from: 'bundle-types.gradle'

ext {

    // the Liferay Workspace extension is accessible as ${gradle.liferayWorkspace}:
    // https://github.com/liferay/liferay-portal/blob/master/modules/sdk/gradle-plugins-workspace/src/main/java/com/liferay/gradle/plugins/workspace/WorkspaceExtension.java
    currentEnvironmentName = gradle.liferayWorkspace.getEnvironment()

    liferayBundleBuiltTarFile = distBundleTarTask.archivePath

    //
    // The description of how the DEB / RPM will download & install the JDK
    //

    jdk = [
            versionMajor: selectedJdkVersionMajor as String,
            version     : downloadableJdks[selectedJdkVersionMajor].version as String,
            download    : downloadableJdks[selectedJdkVersionMajor],
            installation: [
                    // The path where JDKs will be placed into by the deb / rpm packages or
                    // downloaded by the JDK installation script being generated
                    sourceArchiveParentDir: '/opt/liferay',

                    parentDir             : '/opt/liferay',
                    symlinkName           : "oracle-jdk-${selectedJdkVersionMajor}" as String
            ]
    ]

    // can be used by modules depending on this module (like 'docker')
    javaHome = "${jdk.installation.parentDir}/${jdk.installation.symlinkName}" as String

    //
    // The description of how the DEB / RPM will install the Liferay bundle
    //

    // The directory where the TAR will be temporarily uploaded to be installed from the DEB / RPM
    liferayBundleSourceArchiveParentDir = '/opt/liferay'

    // The full path to the TAR as uploaded from the DEB / RPM
    liferayBundleArchive = "${liferayBundleSourceArchiveParentDir}/${project.liferayBundleBuiltTarFile.name}" as String

    // The absolute path where Liferay bundle will be installed and expected to
    // be found when uninstalling.
    liferayHome = '/opt/liferay/liferay-portal-tomcat'

    // The directory inside 'liferayHome' which hold various data generated by Liferay.
    liferayHomeDataDirName = 'data'

    // The OS user & group to be used to own all Liferay files and start the bundle
    liferayUser = 'liferay'
    liferayGroup = 'liferay'

    // The name of OS service to start / stop liferay. Typically also the name
    // of script in '/etc/init.d'
    liferayServiceName = 'liferay-tomcat'
}

assert currentEnvironmentName, "'currentEnvironmentName' retrieved from 'gradle.liferayWorkspace' cannot be empty"

assert liferayBundleBuiltTarFile, "Task '${distBundleTarTaskPath}' does not produce any .tag.gz file"

apply from: 'templates.gradle'

// The package definition common to both DEB and RPM packages. Contains the files being
// installed into / removed from OS when package is added / removed by the package manager
// in the OS (dpkg for DEB, rpm for RPM).
ospackage {
    def sanitizer = new Sanitizer(logger: logger)

    packageName = sanitizer.sanitizePackageName("${rootProject.name}.${currentEnvironmentName}")

    packageDescription = "Liferay bundle (Tomcat) installed in '${liferayHome}', " +
            "service script '/etc/init.d/${liferayServiceName}' and " +
            "Oracle JDK ${jdk.version} installed in ${javaHome}."

    // take checked project's version (no 'undefined') and append the environment name which was used
    version = sanitizer.sanitizePackageVersion(gradle.liferayWorkspaceEe.projectVersion)

    // releaseNumber is type int, already checked in 'liferay-workspace-ee.gradle'
    release = gradle.liferayWorkspaceEe.releaseNumber

    // default owner of all files installed by the packages; we will chown
    // to liferay:liferay selectively, in packaged installation scripts
    user 'root'
    permissionGroup 'root'


    // add TAR-ed bundle, will be installed using script ('install-liferay-bundle.sh')
    // from target location '${liferayBundleArchive}'
    from(liferayBundleBuiltTarFile) {
        into liferayBundleSourceArchiveParentDir
    }

    // add startup script;
    // in SCM, keep it as liferay-tomcat.sh to allow IDE formatting and rename
    // it during transfer to DEB / RPM
    from(generatePkgFilesFromTemplates.getOutputFile('init.d/liferay-tomcat.sh')) {
        into '/etc/init.d'
        rename 'liferay-tomcat.sh', liferayServiceName

        fileMode 0744
    }

    requires('tar') // to extract the packaged Liferay bundle (see 'install-liferay-bundle.sh')
}


task downloadOracleJdk(type: Download) {
    description "Downloads configured Oracle JDK (${jdk.download.archiveName}) to be bundled " +
            "with Liferay packages into ${jdksCacheDir}."

    group "Liferay Workspace EE - OS package"

    src jdk.download.url
    dest jdksCacheDir

    // do not try to fetch the file again, if it already exists locally; prevents HTTP
    // request to given URL, which would always require files.liferay.com credentials
    overwrite false

    onlyIfNewer true

    acceptAnyCertificate true
    header 'Cookie', 'oraclelicense=accept-securebackup-cookie'

    finalizedBy 'verifyOracleJdk'

    ext.getArchivePath = {
        return file("${jdksCacheDir}/${jdk.download.archiveName}")
    }

    doFirst {
        jdksCacheDir.mkdirs()
    }
}

task verifyOracleJdk(type: Verify, dependsOn: downloadOracleJdk) {
    description "Verifies that the downloaded Oracle JDK (${downloadOracleJdk.getArchivePath()}) " +
            "is valid based on its checksum."

    group "Liferay Workspace EE - OS package"

    src downloadOracleJdk.getArchivePath()
    algorithm 'MD5'
    checksum jdk.download.md5Checksum
}

// DEB on Debian-based systems:
//  * install using 'sudo dpkg -i YOUR_DEB_FILE.deb'
//  * remove using 'sudo dpkg -r YOUR_PACKAGE_NAME'.
//
// See:
//  * http://www.cyberciti.biz/howto/question/linux/dpkg-cheat-sheet.php
//  * https://www.debian.org/doc/manuals/debian-faq/ch-pkg_basics.en.html
//
task distBundleDeb(type: LiferayDebNoJdk, dependsOn: downloadOracleJdk) {

    group "Liferay Workspace EE - OS package"

    // set description once all info for 'getArchivePath()' was configured (packageName, version, release)
    description "Assembles the Liferay bundle as DEB into '${rootProject.relativePath(getArchivePath())}'. " +
            "Oracle JDK ${jdk.version} will be bundled inside and installed into '${javaHome}' during DEB's installation."

    // bundle the Oracle JDK and extract it where the install-oracle-jdk-x-linux-x64.sh expects it
    from(downloadOracleJdk.getArchivePath()) {
        into jdk.installation.sourceArchiveParentDir
    }
}

// RPM on Redhat-based systems:
//  * install with 'sudo rpm -ivh --replacefiles --replacepkgs YOUR_RPM_FILE.rpm'
//  * remove with 'sudo rpm -e YOUR_PACKAGE_NAME'.
//
// See:
//  * http://www.rpm.org/max-rpm/ch-rpm-install.html
//  * http://www.rpm.org/max-rpm/s1-rpm-install-additional-options.html
task distBundleRpm(type: LiferayRpmNoJdk, dependsOn: downloadOracleJdk) {

    group "Liferay Workspace EE - OS package"

    // set description once all info for 'getArchivePath()' was configured (packageName, version, release)
    description "Assembles the Liferay bundle as RPM into '${rootProject.relativePath(getArchivePath())}'. " +
            "Oracle JDK ${jdk.version} will be bundled inside and installed into '${javaHome}' during RPM's installation."

    // bundle the Oracle JDK and extract it where the install-oracle-jdk-x-linux-x64.sh expects it
    from(downloadOracleJdk.getArchivePath()) {
        into jdk.installation.sourceArchiveParentDir
    }
}

task distBundleDebNoJdk(type: LiferayDebNoJdk) {

    group "Liferay Workspace EE - OS package"

    packageName += noJdkBundledPackageSuffix

    // set description once all info for 'getArchivePath()' was configured (packageName, version, release)
    description "Assembles the Liferay bundle as DEB into '${rootProject.relativePath(getArchivePath())}'. " +
            "The Oracle JDK ${jdk.version} will not be bundled, it will be downloaded and installed into ${javaHome} " +
            "during DEB's installation."

    // the same steps as in 'distBundleDeb', but no JDK is bundled - it will be downloaded
    // by the install-oracle-jdk-x-linux-x64.sh script included in the package
}

task distBundleRpmNoJdk(type: LiferayRpmNoJdk) {

    group "Liferay Workspace EE - OS package"

    packageName += noJdkBundledPackageSuffix

    // set description once all info for 'getArchivePath()' was configured (packageName, version, release)
    description "Assembles the Liferay bundle as RPM into '${rootProject.relativePath(getArchivePath())}'. " +
            "The Oracle JDK ${jdk.version} will not be bundled, it will be downloaded and installed into ${javaHome} " +
            "during RPM's installation."

    // the same steps as in 'distBundleDeb', but no JDK is bundled - it will be downloaded
    // by the install-oracle-jdk-x-linux-x64.sh script included in the package
}

clean {
    // we are building DEB / RPM into root project's build/, so make sure to delete it
    delete distBundleDeb.outputs.files, distBundleDebNoJdk.outputs.files,
            distBundleRpm.outputs.files, distBundleRpmNoJdk.outputs.files
}

/**
 * The extension of Deb task from 'nebula.rpm' plugin, which configures the used
 * install / uninstall scripts common to all buildable DEB archives. This is the 'bare'
 * Liferay DEB, without any additions (like Oracle JDK installation).
 *
 * Define the class inline, to make obvious what scripts are being used and how.
 */
class LiferayDebNoJdk extends Deb {
    LiferayDebNoJdk () {
        dependsOn project.checkBundleType, project.generatePkgFilesFromTemplates

        destinationDir project.rootProject.buildDir

        arch = 'amd64'

        project.applyCommonPackagingScripts(this)

        doLast {
            boolean jdkBundled = !packageName.endsWith('.nojdk')

            logger.quiet "Assembled Liferay bundle as DEB package archive '${project.rootProject.relativePath(getArchivePath())}':"
            logger.quiet "  * package name '${packageName}', version '${version}', release ${release}"
            logger.quiet "  * Oracle JDK ${project.jdk.version} (${jdkBundled ? 'bundled' : 'downloaded on installation'})"
        }
    }
}

/**
 * The extension of Rpm task from 'nebula.rpm' plugin, which configures the used
 * install / uninstall scripts commons to all buildable RPM archives. This is
 * the 'bare' RPM, without any additions (like Oracle JDK installation).
 *
 * Define the class inline, to make obvious what scripts are being used and how.
 */
class LiferayRpmNoJdk extends Rpm {
    LiferayRpmNoJdk () {
        dependsOn project.checkBundleType, project.generatePkgFilesFromTemplates

        destinationDir project.rootProject.buildDir

        // we are installing OracleJDK 'linux-x64', so enforce 64b architecture

        // see:
        //  * http://grepcode.com/file/repo1.maven.org/maven2/org.redline-rpm/redline/1.1.16/org/redline_rpm/header/Architecture.java
        //  * http://grepcode.com/file/repo1.maven.org/maven2/org.redline-rpm/redline/1.1.16/org/redline_rpm/header/Os.java
        arch = Architecture.X86_64
        os   = Os.LINUX

        project.applyCommonPackagingScripts(this)

        doLast {
            boolean jdkBundled = !packageName.endsWith('.nojdk')

            logger.quiet "Assembled Liferay bundle as RPM package archive '${project.rootProject.relativePath(getArchivePath())}':"
            logger.quiet "  * package name '${packageName}', version '${version}', release ${release}"
            logger.quiet "  * Oracle JDK ${project.jdk.version} (${jdkBundled ? 'bundled' : 'downloaded on installation'})"
        }
    }
}

/**
 * Adds all packaging scripts common to both DEB and RPM tasks, on the task instance
 * being passed as the argument.
 *
 * @param debOrRpmTask the instance of Deb or Rpm task (or their subclass)
 */
def applyCommonPackagingScripts(debOrRpmTask) {

    // packaged install / uninstall scripts
    debOrRpmTask.preInstall generatePkgFilesFromTemplates.getOutputFile('pkg_scripts/add-liferay-user-and-group.sh')

    // Add the step to install the Oracle JDK (possibly downloading it first, if not bundled)
    debOrRpmTask.postInstall generatePkgFilesFromTemplates.getOutputFile(
            "/pkg_scripts/install-oracle-jdk-${jdk.versionMajor}-linux-x64.sh")

    // Make sure Liferay is stopped before installing the new bundle;
    // file will be present, since it gets installed by the DEB / RPM
    debOrRpmTask.postInstall generatePkgFilesFromTemplates.getOutputFile('pkg_scripts/stop-liferay-bundle.sh')

    // Run the Liferay bundle installation script
    debOrRpmTask.postInstall generatePkgFilesFromTemplates.getOutputFile('pkg_scripts/install-liferay-bundle.sh')

    // add the '/etc/init.d/liferay-tomcat' script to start Liferay bundle Tomcat on OS boot
    debOrRpmTask.postInstall generatePkgFilesFromTemplates.getOutputFile('pkg_scripts/enable-liferay-bundle-service.sh')

    // Do NOT auto-start the Liferay Tomcat after installation of this DEB / RPM; only inform
    // it's up to the user to perform this task
    debOrRpmTask.postInstall "echo ''"
    debOrRpmTask.postInstall "echo '==> Installed Liferay bundle can be started with " +
                                "[/etc/init.d/${liferayServiceName} start] - as root or sudo <=='"
    debOrRpmTask.postInstall "echo ''"


    // After installation, remove the installed bundle archive, since it is not
    // needed any more (all bundle files get extracted using the script)
    debOrRpmTask.postInstall "rm -rf '${liferayBundleArchive}'"
    debOrRpmTask.postInstall "rm -rf '${jdk.installation.sourceArchiveParentDir}/${jdk.download.archiveName}'"


    debOrRpmTask.preUninstall generatePkgFilesFromTemplates.getOutputFile('pkg_scripts/stop-liferay-bundle.sh')


    // Delete the Liferay bundle directory, but leave [bundle]/data untouched
    debOrRpmTask.preUninstall generatePkgFilesFromTemplates.getOutputFile('pkg_scripts/uninstall-liferay-bundle.sh')

    // Remove the upstart links to /etc/init.d script; do this in pre- phase, before
    // removing the /etc/init.d script file itself
    debOrRpmTask.preUninstall generatePkgFilesFromTemplates.getOutputFile('pkg_scripts/disable-liferay-bundle-service.sh')

    // keep the installed Oracle JDK (extracted files inside directory /opt/liferay/oracle-jdk-8)
    // in place after DEB / RPM removal - no need to delete them since we do not set any global variable
    // pointing to this JDK (its for Liferay only, used by specifying full path of the 'java' binary)
}

/**
 * Allows to transform any String into being a valid DEB / RPM package name, as
 * required by 'ospackage' plugin, which builds DEBs / RPMs for us.
 */
@groovy.transform.Immutable
class Sanitizer {

    private final Logger logger

    // https://github.com/craigwblake/redline/blob/master/src/main/java/org/redline_rpm/Builder.java#L61-L62
    def private static final nameForbiddenFirstCharacterPattern = ~'^[^a-z0-9]+'
    def private static final nameForbiddenCharactersPattern = ~'[^a-z0-9.+-]+'

    def private static final versionForbiddenCharactersPattern = ~'[^a-z0-9.]+'

    /**
     * DEB / RPM package name has to match [a-z0-9.+-] and start with alphanumeric character, example error is:
     *      Invalid package name 'liferay-workspace-DistBundleDebSpec-1455895234095' - a valid package name must
     *      start with an alphanumeric character, have a length of at least two characters and only contain [a-z0-9.+-]
     *
     * @param unsanitizedPackageName the starting name to transform into valid DEB / RPM package name
     * @return
     */
    def String sanitizePackageName(String unsanitizedPackageName) {
        assert unsanitizedPackageName != null

        logger.info "[LWE] unsanitized package name: '${unsanitizedPackageName}'"

        String sanitizedPackageName = unsanitizedPackageName.trim().toLowerCase()

        logger.debug "[LWE] 1: ${sanitizedPackageName}"

        // make sure package name starts with alpha-num character -- strip any other chars until alpha-num one remains
        sanitizedPackageName = sanitizedPackageName.replaceFirst(nameForbiddenFirstCharacterPattern, '')

        logger.debug "[LWE] 2: ${sanitizedPackageName}"

        // for too short names (like root project's dir like 'a'), make it 2 characters long
        if (sanitizedPackageName.length() == 0) {
            sanitizedPackageName = 'aa'

            logger.debug "[LWE] 3: ${sanitizedPackageName}"
        } else if (sanitizedPackageName.length() == 1) {
            sanitizedPackageName += '-'

            logger.debug "[LWE] 4: ${sanitizedPackageName}"
        }

        // make sure all disallowed characters are replaced with '-'
        sanitizedPackageName = sanitizedPackageName.replaceAll(nameForbiddenCharactersPattern, '-')

        logger.info "[LWE] Sanitized DEB / RPM package name: '${unsanitizedPackageName}' -> '${sanitizedPackageName}'"

        return sanitizedPackageName
    }

    def String sanitizePackageVersion(String unsanitizedPackageVersion) {
        assert unsanitizedPackageVersion != null

        logger.info "[LWE] unsanitized package version: '${unsanitizedPackageVersion}'"

        String sanitizedVersionName = unsanitizedPackageVersion.trim().toLowerCase()

        logger.debug "[LWE] 1: ${sanitizedVersionName}"

        sanitizedVersionName = sanitizedVersionName.replaceAll(versionForbiddenCharactersPattern, '.')

        logger.debug "[LWE] 2: ${sanitizedVersionName}"

        // trim first sequence of repeated '.'
        sanitizedVersionName = sanitizedVersionName.replaceAll(~'^[.]+', '')

        logger.debug "[LWE] 3: ${sanitizedVersionName}"

        // replace other sequences of repeated '.' with single one
        sanitizedVersionName = sanitizedVersionName.replaceAll(~'[.]+', '.')

        logger.debug "[LWE] 4: ${sanitizedVersionName}"

        if (sanitizedVersionName.length() == 0) {
            sanitizedVersionName = '1'

            logger.debug "[LWE] 5: ${sanitizedVersionName}"
        }

        logger.info "[LWE] Sanitized DEB / RPM package version: '${unsanitizedPackageVersion}' -> '${sanitizedVersionName}'"

        return sanitizedVersionName
    }

}

task testSanitizerClass {

    doLast {

        // since we Gradle does not support 'buildSrc' inside sub-projects, at least
        // allow to test the inline-class we created in here
        // this task has its Spock test inside 'TestSanitizerClassSpec'

        def s = new Sanitizer(logger: logger)

        assert s.sanitizePackageName("a") == "a-"
        assert s.sanitizePackageName("-a") == "a-"
        assert s.sanitizePackageName("_") == "aa"
        assert s.sanitizePackageName("some project 0123456789") == "some-project-0123456789"
        assert s.sanitizePackageName("some...project+++name---here") == "some...project+++name---here"
        assert s.sanitizePackageName("some     project") == "some-project"
        assert s.sanitizePackageName("Some_Project__name") == "some-project-name"

        logger.quiet "All tests for Sanitizer.sanitizePackageName() class passed"

        assert s.sanitizePackageVersion('1.0.0') == '1.0.0'
        assert s.sanitizePackageVersion('1.0.0.local') == '1.0.0.local'
        assert s.sanitizePackageVersion('1.0.0.local--2_-_3') == '1.0.0.local.2.3'
        assert s.sanitizePackageVersion('-.0.0.-local--2_-_3') == '0.0.local.2.3'

        logger.quiet "All tests for Sanitizer.sanitizePackageVersion() class passed"
    }
}